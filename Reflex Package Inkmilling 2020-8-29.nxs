{"name":"inkmilling","enabled":true,"description":"","type":"group","id":1,"items":[{"type":"function","name":"INSTALL README","enabled":true,"id":51,"code":"// To get started please enter 'minstall' and follow the prompts.\n\n// - Steps:\n// -- 1. msettings color\n// --- Review: https://www.w3schools.com/tags/ref_colornames.asp\n// --- Shows the various supported color options\n// --- Colors be entered as all one word, and all lowercase\n\n// -- 2. msettings artmill\n// --- This setting is to establish if you're using an Artifact Mill\n\n// -- 3. msettings redpriority\n// -- 4. msettings bluepriority\n// --- These settings allow you to decide your chosen red or blue reagents.\n\n// You can view your settings any time using the command 'msettings show'"},{"type":"function","name":"README","enabled":true,"id":26,"code":"// Welcome to Aliandor's Ink Milling Script!\n\n// To begin, please enter the command 'rcount'\n// - This will check all of your milling reagents in rift.  It does this by inrifting everything in your inventory!\n// - It will then display the count of your reagents and how many of each ink you could mill.\n\n// You can check individual counts of how many inks you can make by entering 'icounts <color>'\n// E.G. 'icounts red' will show you the number of red inks you can mill based on the last count.\n\n// Entering 'icounts' on its own shows you syntax information.\n\n// You can mill by color and amount. 1-10 if you have the Artifact Mill.  1-5 if you don't.\n// - E.G. 'greenmill 1-10' will outr reagents for 1-10 green inks, put them in your mill, and mill for that count and color\n// - Entering '<color>mill will show you syntax information if you do not include a #\n// - E.G. 'greenmill' will show you that you can mill 1-5 (or 1-10 if you have artifact mill).\n\n// You can also use the repeat milling feature for multiple batches at once.\n// - Syntax: r<color>mill #\n// - E.G. 'rredmill 50' would mill 5 (10 if you don't have artifact) batches of red ink.\n// - You can stop the batches prematurely by entering 'rstop'\n// - It will end the current batch and be done.\n\n// You can set your reagent priority for blue/red with the following syntaxes:\n// - Red:  msettings redpriority (clay|chitin|lowest|highest)\n// - Blue: msettings bluepriority (bladder|lumic|lowest|highest)\n// - By default the script uses whichever you have the lowest of (for red and blue regeants).  \n\n// You can set your preferred foreground and background colors for system announces with:\n// - msettings color fgcolor bgcolor\n// - Current options are found here: https://www.w3schools.com/tags/ref_colornames.asp\n\n// Reagent Tracking\n// - Subtracts from total on outrift.\n// - Adds to total on inrift.\n// - Does not count what's in your inventory.\n\n// Artifact Mill Support\n// - You can change Artifact Mill settings with the following command:\n// - msettings artmill yes|no\n\n// You can see how many reagents you need to collect to make a certain number of inks\n// - Syntax: 'tomake # <color>'\n// - Counts how many reagents it takes to make, and subtracts what you already have\n// - Displays how many you need to collect.\n\n\n\n// -----------------------------------------------------------------------------\n\n// What's next? (No particular order)\n\n// Nothing on the agenda for now.  Message Aliandor in Achaea, or make an issue in the GitHub Repo if you have suggestions!"},{"type":"function","name":"Alias Cheatsheat","enabled":true,"id":98,"code":"//Enter the function here\n\n// 'rcount' \n// -- Checks counts for all of your reagents in your rift for milling.\n\n// '<color>mill #'\n// -- Lets you mill a single batch of reagents 5 for non artifact mill, 10 for artifact mill.\n\n// 'r<color>mill #'\n// -- Lets you batch mill up to any amount.\n\n// 'tomake # <color>'\n// -- Calculates how many reagents you need to collect to make requested number of inks.\n\n// 'icounts all'\n// -- Shows current amount of inks you can mill with current reagents.\n\n// 'msettings show'\n// -- Shows your current settings\n\n// 'minstall'\n// -- Removes all script variables, if they exist and begins the installation process."},{"type":"group","name":"Settings","enabled":true,"id":45,"items":[{"type":"group","name":"Color","enabled":true,"id":48,"items":[{"type":"alias","name":"Color Confirm","enabled":true,"id":47,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"//Enter the script here\nvar fgcolor = get_variable(\"mfgcolor\")\nvar bgcolor = get_variable(\"mbgcolor\")\n\ndisplay_notice(\"(AT Milling): Color selection confirmed!\", fgcolor, bgcolor)\n\nif (get_variable(\"minstalling\") == \"Yes\") {\nrun_function(\"minstall step 2\", \"\", \"Inkmilling\")}\n"}],"text":"^msettings color (.+) (.+) confirm$"},{"type":"alias","name":"Color Settings","enabled":true,"id":46,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"//Enter the script here\n\nvar fgcolor = args[1]\nvar bgcolor = args[2]\n\nif (args[1] == undefined && args[2] == undefined) {\n    display_notice(\"(AT Milling): Please select your color prefences.  Color options can be found here: https://www.w3schools.com/tags/ref_colornames.asp Syntax: 'msettings color <fgcolor> <bgcolor>' Enter color selections each as one word and lowercase.  E.G.: powderblue antiquewhite\", )\n} \nelse {\n    set_variable(\"mfgcolor\", args[1])\n    set_variable(\"mbgcolor\", args[2])\n    display_notice(\"(AT Milling): Here's what that looks like.  If you like it please enter 'msettings color <fgcolor> <bgcolor> confirm\", fgcolor, bgcolor)\n}"}],"text":"^msettings color(?: (.+) (.+))?$"}],"actions":[]},{"type":"group","name":"ArtMill","enabled":true,"id":49,"items":[{"type":"alias","name":"Artifact Mill Settings","enabled":true,"id":50,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"//Enter the script here\n\nvar fgcolor = get_variable(\"mfgcolor\")\nvar bgcolor = get_variable(\"mbgcolor\")\n\nif (args[1] == \"no\") {\n    set_variable(\"ArtifactMill\", \"No\");\n    display_notice(\"(AT Milling): Artifact mill set to \" + args[1] + \".\", fgcolor, bgcolor);\n} else {\n    if (args[1] == \"yes\") {\n    set_variable(\"ArtifactMill\", \"Yes\");\n    display_notice(\"(AT Milling): Artifact mill set to \" + args[1] + \".\", fgcolor, bgcolor)\n} else {\n    display_notice(\"(AT Milling): Artifact mill options are yes or no.  Syntax: msettings artmill yes|no\", fgcolor, bgcolor)\n}}\n\nif (args[1] == undefined) {\n} \nelse {\n    if (get_variable(\"minstalling\") == \"Yes\") {\n        run_function(\"minstall step 3\", \"\", \"Inkmilling\")\n    }\n}"}],"text":"^msettings artmill(?: (yes|no))?$"}],"actions":[]},{"type":"group","name":"Reagent Priority","enabled":true,"id":54,"items":[{"type":"alias","name":"Red Priority","enabled":true,"id":55,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"//Enter the script here\n\nvar fgcolor = get_variable(\"mfgcolor\")\nvar bgcolor = get_variable(\"mbgcolor\")\n\nif (args[1] == undefined) {\n    display_notice(\"(AT Milling): Red reagent priority options are clay, chitin, lowest, highest.  Syntax: msettings redpriority clay|chitin|lowest|highest.\", fgcolor, bgcolor)\n} else {\n    display_notice(\"(AT Milling): Red reagent priority set to: \" + args[1] + \".\", fgcolor, bgcolor);\n    set_variable(\"redpriority\", args[1])\n}\n\nif (args[1] == undefined) {} else {if (get_variable(\"minstalling\") == \"Yes\") {run_function(\"minstall step 4\", \"\", \"Inkmilling\")}}"}],"text":"^msettings redpriority(?: (clay|chitin|lowest|highest))?$"},{"type":"alias","name":"Blue Priority","enabled":true,"id":56,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"//Enter the script here\n\nvar fgcolor = get_variable(\"mfgcolor\")\nvar bgcolor = get_variable(\"mbgcolor\")\n\nif (args[1] == undefined) {\n    display_notice(\"(AT Milling): Blue reagent priority options are bladder, lumic, lowest, highest.  Syntax: msettings bluepriority bladder|lumic|lowest|highest.\", fgcolor, bgcolor)\n} else {\n    display_notice(\"(AT Milling): Blue reagent priority set to: \" + args[1] + \".\", fgcolor, bgcolor);\n    set_variable(\"bluepriority\", args[1])\n}\n\nif (args[1] == undefined) {} else {if (get_variable(\"minstalling\") == \"Yes\") {run_function(\"minstall confirm\", \"\", \"Inkmilling\")}}"}],"text":"^msettings bluepriority(?: (bladder|lumic|lowest|highest))?$"}],"actions":[]},{"type":"group","name":"Install","enabled":true,"id":87,"items":[{"type":"group","name":"Install Aliases","enabled":true,"id":90,"items":[{"type":"alias","name":"Install Alias","enabled":true,"id":89,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"set_variable(\"minstalling\", \"Yes\")\nvar fgcolor = get_variable(\"mfgcolor\")\nvar bgcolor = get_variable(\"mbgcolor\")\n\ndisplay_notice(\"Welcome to my Milling Script!  If you had any previous variables for this script, they've been removed. Let's get you set up!\", fgcolor, bgcolor)\n\ndelete_variable(\"BlueBladder\")\ndelete_variable(\"WyrmTongue\")\ndelete_variable(\"SharkTooth\")\ndelete_variable(\"FishScales\")\ndelete_variable(\"GoldFlakes\")\ndelete_variable(\"YellowChitin\")\ndelete_variable(\"BuffaloHorn\")\ndelete_variable(\"BlueMoss\")\ndelete_variable(\"RedClay\")\ndelete_variable(\"RedChitin\")\ndelete_variable(\"Rcounting\")\ndelete_variable(\"ArtifactMill\")\ndelete_variable(\"RepeatCount\")\ndelete_variable(\"RepeatRemainder\")\ndelete_variable(\"RepeatColor\")\ndelete_variable(\"MilledRemainder\")\ndelete_variable(\"bluepriority\")\ndelete_variable(\"redpriority\")\ndelete_variable(\"mfgcolor\")\ndelete_variable(\"mbgcolor\")\n\n\nrun_function(\"minstall step 1\", \"\", \"Inkmilling\")"}],"text":"^minstall$"},{"type":"alias","name":"Show Settings","enabled":true,"id":88,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"var fgcolor = get_variable(\"mfgcolor\")\nvar bgcolor = get_variable(\"mbgcolor\")\n\nclient.print(\"______________________________\")\nclient.print(\"      Milling Script Settings:   \")\nclient.print(\"\")\nclient.print(\"+++ Artifact Mill: \" + get_variable(\"ArtifactMill\"))\nclient.print(\"+++ Blue Priority: \" + get_variable(\"bluepriority\"))\nclient.print(\"+++ Red Priority: \" + get_variable(\"redpriority\"))\nclient.print(\"+++ FG Color: \" + get_variable(\"mfgcolor\"), fgcolor)\nclient.print(\"+++ BG Color: \" + get_variable(\"mbgcolor\"), bgcolor)\nclient.print(\"+++ Use 'minstall' to change\")\nclient.print(\"______________________________\")\n//client.print(\"|\")"}],"text":"^msettings show$"},{"type":"alias","name":"Install Confirm","enabled":true,"id":97,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"//Enter the script here\nvar fgcolor = get_variable(\"mfgcolor\")\nvar bgcolor = get_variable(\"mbgcolor\")\n\ndelete_variable(\"minstalling\")\n\ndisplay_notice(\"You're all set.  Enjoy!  Please enter 'rcount' to get started!  Be sure to read the README in the Inkmilling Package Settings\", fgcolor, bgcolor)"}],"text":"^minstall confirm$"}],"actions":[]},{"type":"group","name":"Install Functions","enabled":true,"id":91,"items":[{"type":"function","name":"minstall step 1","enabled":true,"id":92,"code":"// Color Settings\n\nvar fgcolor = get_variable(\"mfgcolor\")\nvar bgcolor = get_variable(\"mbgcolor\")\n\nsend_command(\"msettings color\")"},{"type":"function","name":"minstall step 2","enabled":true,"id":93,"code":"//Artifact Mill settings\nvar fgcolor = get_variable(\"mfgcolor\")\nvar bgcolor = get_variable(\"mbgcolor\")\n\nsend_command(\"msettings artmill\")"},{"type":"function","name":"minstall step 3","enabled":true,"id":94,"code":"//Red Reagent Priority\nvar fgcolor = get_variable(\"mfgcolor\")\nvar bgcolor = get_variable(\"mbgcolor\")\n\nsend_command(\"msettings redpriority\")"},{"type":"function","name":"minstall step 4","enabled":true,"id":95,"code":"// Blue Reagent Priority\nvar fgcolor = get_variable(\"mfgcolor\")\nvar bgcolor = get_variable(\"mbgcolor\")\n\nsend_command(\"msettings bluepriority\")"},{"type":"function","name":"minstall confirm","enabled":true,"id":96,"code":"var fgcolor = get_variable(\"mfgcolor\")\nvar bgcolor = get_variable(\"mbgcolor\")\n\ndisplay_notice(\"(AT Milling): Please enter 'minstall confirm' to save settings or 'minstall' to start over!\", fgcolor, bgcolor)"}],"actions":[]}],"actions":[]}],"actions":[]},{"type":"group","name":"Counting","enabled":true,"id":21,"items":[{"type":"group","name":"Counting Triggers","enabled":true,"id":52,"items":[{"type":"trigger","name":"CountDone","enabled":true,"id":23,"matching":"substring","whole_words":true,"case_sensitive":true,"text":"You have stored everything in your rift that you are able.","actions":[{"action":"script","script":"//Enter the script here\nif (get_variable(\"Rcounting\") == \"Yes\") {\n    gag_current_line()\n    send_command(\"rshow\")\n    send_command(\"icounts all\")\n}\nset_variable(\"Rcounting\", \"No\")\n"}]},{"type":"trigger","name":"INR Gag","enabled":true,"id":24,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You store (.+), bringing the total in the rift to (.+).$","actions":[{"action":"script","script":"//Enter the script here\n\nif (get_variable(\"Rcounting\") == \"Yes\") {gag_current_line()};"}]},{"type":"trigger","name":"Common","enabled":true,"id":11,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You remove (.+) fish scales, bringing the total in the rift to 0.$","actions":[{"action":"script","script":"//Enter the script here\nif (get_variable(\"Rcounting\") == \"Yes\") {\n    gag_current_line()\n}\nset_variable(\"FishScales\", args[1])"}]},{"type":"trigger","name":"Uncommon","enabled":true,"id":10,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You remove (.+) buffalo horn, bringing the total in the rift to 0.$","actions":[{"action":"script","script":"//Enter the script here\nif (get_variable(\"Rcounting\") == \"Yes\") {\n    gag_current_line()\n}\nset_variable(\"BuffaloHorn\", args[1])"}]},{"type":"trigger","name":"Scarce","enabled":true,"id":12,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You remove (.+) shark tooth, bringing the total in the rift to 0.$","actions":[{"action":"script","script":"//Enter the script here\nif (get_variable(\"Rcounting\") == \"Yes\") {\n    gag_current_line()\n}\nset_variable(\"SharkTooth\", args[1])"}]},{"type":"trigger","name":"Rare","enabled":true,"id":13,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You remove (.+) wyrm tongue, bringing the total in the rift to 0.$","actions":[{"action":"script","script":"//Enter the script here\nif (get_variable(\"Rcounting\") == \"Yes\") {\n    gag_current_line()\n}\nset_variable(\"WyrmTongue\", args[1])"}]},{"type":"trigger","name":"Gold","enabled":true,"id":14,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You remove (.+) gold flakes, bringing the total in the rift to 0.$","actions":[{"action":"script","script":"//Enter the script here\nif (get_variable(\"Rcounting\") == \"Yes\") {\n    gag_current_line()\n}\nset_variable(\"GoldFlakes\", args[1])"}]},{"type":"trigger","name":"Yellow","enabled":true,"id":15,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You remove (.+) yellow chitin, bringing the total in the rift to 0.$","actions":[{"action":"script","script":"//Enter the script here\nif (get_variable(\"Rcounting\") == \"Yes\") {\n    gag_current_line()\n}\nset_variable(\"YellowChitin\", args[1])"}]},{"type":"trigger","name":"Blue Moss","enabled":true,"id":17,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You remove (.+) lumic moss, bringing the total in the rift to 0.$","actions":[{"action":"script","script":"//Enter the script here\nif (get_variable(\"Rcounting\") == \"Yes\") {\n    gag_current_line()\n}\nset_variable(\"BlueMoss\", args[1])"}]},{"type":"trigger","name":"Red Clay","enabled":true,"id":18,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You remove (.+) red clay, bringing the total in the rift to 0.$","actions":[{"action":"script","script":"//Enter the script here\nif (get_variable(\"Rcounting\") == \"Yes\") {\n    gag_current_line()\n}\nset_variable(\"RedClay\", args[1])"}]},{"type":"trigger","name":"Red Chitin","enabled":true,"id":19,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You remove (.+) red chitin, bringing the total in the rift to 0.$","actions":[{"action":"script","script":"//Enter the script here\nif (get_variable(\"Rcounting\") == \"Yes\") {\n    gag_current_line()\n}\nset_variable(\"RedChitin\", args[1])"}]},{"type":"trigger","name":"Blue Bladder","enabled":true,"id":20,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You remove (.+) ink bladder, bringing the total in the rift to 0.$","actions":[{"action":"script","script":"//Enter the script here\nif (get_variable(\"Rcounting\") == \"Yes\") {\n    gag_current_line()\n}\nset_variable(\"BlueBladder\", args[1])"}]}],"actions":[]},{"type":"group","name":"Counting Alias","enabled":true,"id":53,"items":[{"type":"alias","name":"Count Show","enabled":true,"id":22,"matching":"begins","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"//Enter the script here\n\nvar Uncommon = get_variable(\"BuffaloHorn\")\nvar Scarce = get_variable(\"SharkTooth\")\nvar Rare = get_variable(\"WyrmTongue\")\nvar Common = get_variable(\"FishScales\")\nvar Red = (parseInt(get_variable(\"RedClay\")) + parseInt(get_variable(\"RedChitin\")))\nvar Blue = (parseInt(get_variable(\"BlueBladder\")) + parseInt(get_variable(\"BlueMoss\")))\nvar Gold = get_variable(\"GoldFlakes\")\nvar Yellow = get_variable(\"YellowChitin\")\nvar fgcolor = get_variable(\"mfgcolor\")\nvar bgcolor = get_variable(\"mbgcolor\")\n\nclient.print(\"Current Reagent Counts:\")\nclient.print(\"Common: \" + Common + \" | \" + \"Uncommon: \" + Uncommon + \" | \" + \"Scarce: \" + Scarce+ \" | \" + \"Rare: \" + Rare+ \" | \" + \"Red: \" + Red+ \" | \" + \"Blue: \" + Blue+ \" | \" + \"Yellow: \" + Yellow+ \" | \" + \"Gold: \" + Gold)"}],"text":"rshow"},{"type":"alias","name":"Reagent Counter","enabled":true,"id":16,"matching":"begins","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"command","command":"inr all","prefix_suffix":true},{"action":"wait","seconds":"0","milliseconds":"300"},{"action":"script","script":"set_variable(\"Rcounting\", \"Yes\")"},{"action":"script","script":"send_command(\"outr all tongue\")\nsend_command(\"outr all tooth\")\nsend_command(\"outr all scales\")\nsend_command(\"outr all flakes\")\nsend_command(\"outr all yellowchitin\")\nsend_command(\"outr all buffalohorn\")\nsend_command(\"outr all lumic\")\nsend_command(\"outr all clay\")\nsend_command(\"outr all redchitin\")\nsend_command(\"outr all bladder\")\nsend_command(\"inr all\")"}],"text":"rcount"},{"type":"alias","name":"Ink Counts","enabled":true,"id":25,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"// 'icounts' by itself will show you the available syntax options\n// 'icounts <color>' will show you the inks you can make of that color\n// 'icounts all' will show you how many inks you can make of every color\n\n\nvar Uncommon = parseInt(get_variable(\"BuffaloHorn\"))\nvar Scarce = parseInt(get_variable(\"SharkTooth\"))\nvar Rare = parseInt(get_variable(\"WyrmTongue\"))\nvar Common = parseInt(get_variable(\"FishScales\"))\nvar Red = (parseInt(get_variable(\"RedClay\")) + parseInt(get_variable(\"RedChitin\")))\nvar Blue = (parseInt(get_variable(\"BlueBladder\")) + parseInt(get_variable(\"BlueMoss\")))\nvar Gold = parseInt(get_variable(\"GoldFlakes\"))\nvar Yellow = parseInt(get_variable(\"YellowChitin\"))\nvar fgcolor = get_variable(\"mfgcolor\")\nvar bgcolor = get_variable(\"mbgcolor\")\n\n//Red is 1x red, 1x common\nvar RedReagents = [Red, Common]\nvar redcount = Math.floor(Math.min.apply(Math, RedReagents))\n\n//Blue is 1x blue, 1x uncommon\nvar BlueReagents = [Blue, Uncommon]\nvar bluecount = Math.floor(Math.min.apply(Math, BlueReagents))\n\n//Green is 2x blue, 1x yellow, 2x uncommon, 1x scarce\nvar GreenReagents = [Blue/2, Yellow, Uncommon/2, Scarce]\nvar greencount = Math.floor(Math.min.apply(Math, GreenReagents))\n\n//Yellow is 1x yellow, 1x scarce\nvar YellowReagents = [Yellow, Scarce]\nvar yellowcount = Math.floor(Math.min.apply(Math, YellowReagents))\n\n//Purple is 2x red, 2x blue, 2x common, 2x uncommon, 1x rare\nvar PurpleReagents = [Red/2, Blue/2, Common/2, Uncommon/2, Rare]\nvar purplecount = Math.floor(Math.min.apply(Math, PurpleReagents))\n\n//Gold is 1x gold, 2 common, 2 uncommon, 2 scarce, 1x rare\nvar GoldReagents = [Gold, Common/2, Uncommon/2, Scarce/2, Rare]\nvar goldcount = Math.floor(Math.min.apply(Math, GoldReagents))\n\n// Black is 1x red, 1x blue, 1x yellow, 1x gold, 2x common, 2x uncommon, 2x scarce, 3x rare\nvar BlackReagents = [Red, Blue, Yellow, Gold, Common/2, Uncommon/2, Scarce/2, Rare/3]\nvar blackcount = Math.floor(Math.min.apply(Math, BlackReagents))\n\nif (args[1] == \"red\") {display_notice(\"You can make \" + redcount + \" red inks.\")} else\nif (args[1] == \"blue\") {display_notice(\"You can make \" + bluecount + \" blue inks.\")} else\nif (args[1] == \"green\") {display_notice(\"You can make \" + greencount + \" green inks.\")} else\nif (args[1] == \"yellow\") {display_notice(\"You can make \" + yellowcount + \" yellow inks.\")} else\nif (args[1] == \"purple\") {display_notice(\"You can make \" + purplecount + \" purple inks.\")} else\nif (args[1] == \"gold\") {display_notice(\"You can make \" + goldcount + \" gold inks,\")} else\nif (args[1] == \"black\") {display_notice(\"You can make \" + blackcount + \" black inks,\")} else\nif (args[1] == \"all\") {display_notice(\"You could make: \" + redcount + \" red inks, \" + bluecount + \" blue inks, \" + greencount + \" green inks, \" + yellowcount + \" yellow inks, \" + purplecount + \" purple inks, \" + goldcount + \" gold inks or, \" + blackcount + \" black inks.\")} \n\nelse {\n  display_notice(\"(AT Milling): You have entered the 'icounts' command.  This command can be used to show individual amounts of inks you can mill with your current reagents. Syntax options are red, blue, green, yellow, purple, gold, black or all. Enter: icounts <color>.\", fgcolor, bgcolor)\n}\n"}],"text":"^icounts(?: (.+))?$"}],"actions":[]}],"actions":[]},{"type":"group","name":"Milling","enabled":true,"id":38,"items":[{"type":"group","name":"Normal Milling","enabled":true,"id":9,"items":[{"type":"alias","name":"goldmill 1-10","enabled":true,"id":8,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"var count = parseInt(args[1])\n\nset_variable(\"RepeatCount\", 0)\nset_variable(\"RepeatRemainder\", 0)\nset_variable(\"RepeatColor\", \"\")\nvar fgcolor = get_variable(\"mfgcolor\")\nvar bgcolor = get_variable(\"mbgcolor\")\n\nif (get_variable(\"ArtifactMill\") == \"No\" && count > 5) {\n    display_notice(\"(AT Milling): You do not currently have Artifact Mill enabled.  Please enable Artifact Mill (Syntax: 'msettings artmill yes') or use Repeat Milling.  Syntax: 'rgoldmill #'\", fgcolor, bgcolor)\n} else {\n    if (count == 1) {\n        send_command(\"inr all\")\n        send_command(\"outr 1 flakes\")\n        send_command(\"outr 2 scales\")\n        send_command(\"outr 2 buffalohorn\")\n        send_command(\"outr 2 tooth\")\n        send_command(\"outr 1 tongue\")\n        \n        send_command(\"put flakes in mill\")\n        send_command(\"put group scales in mill\")\n        send_command(\"put group horn in mill\")\n        send_command(\"put group tooth in mill\")\n        send_command(\"put tongue in mill\")\n        send_command(\"mill for 1 gold\")\n        set_variable(\"MillingGag\", \"Yes\")\n                     }\n    else if (count > 1 && count < 11) {\n        send_command(\"inr all\")\n        send_command(\"outr \" + count + \" flakes\")\n        send_command(\"outr \" + count*2 + \" scales\")\n        send_command(\"outr \" + count*2 + \" buffalohorn\")\n        send_command(\"outr \" + count*2 + \" tooth\")\n        send_command(\"outr \" + count + \" tongue\")\n        \n        send_command(\"put group flakes in mill\")\n        send_command(\"put group scales in mill\")\n        send_command(\"put group horn in mill\")\n        send_command(\"put group tooth in mill\")\n        send_command(\"put group tongue in mill\")\n        send_command(\"mill for \" + count + \" gold\")\n        set_variable(\"MillingGag\", \"Yes\")\n    } \n        else {\n            display_notice(\"(AT Milling): Options are 1-5 (or 1-10 if you have artifact mill).  Syntax: 'goldmill #'\", fgcolor, bgcolor)\n        }\n}"}],"text":"^goldmill(?: (1|2|3|4|5|6|7|8|9|10|.+))?$"},{"type":"alias","name":"yellowmill 1-10","enabled":true,"id":4,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"var count = parseInt(args[1])\n\nset_variable(\"RepeatCount\", 0)\nset_variable(\"RepeatRemainder\", 0)\nset_variable(\"RepeatColor\", \"\")\nvar fgcolor = get_variable(\"mfgcolor\")\nvar bgcolor = get_variable(\"mbgcolor\")\n\nif (get_variable(\"ArtifactMill\") == \"No\" && count > 5) {\n    display_notice(\"(AT Milling): You do not currently have Artifact Mill enabled.  Please enable Artifact Mill (Syntax: 'msettings artmill yes') or use Repeat Milling.  Syntax: 'ryellowmill #'\", fgcolor, bgcolor)\n} else {\n    if (count == 1) {\n        send_command(\"inr all\")\n        send_command(\"outr yellowchitin\")\n        send_command(\"outr tooth\")\n        \n        send_command(\"put yellowchitin in mill\")\n        send_command(\"put tooth in mill\")\n        send_command(\"mill for 1 yellow\")\n        set_variable(\"MillingGag\", \"Yes\")\n    }\n    else if (count > 1 && count < 11) {\n        send_command(\"inr all\")\n        send_command(\"outr \" + count + \" yellowchitin\")\n        send_command(\"outr \" + count + \" tooth\")\n        \n        send_command(\"put group yellowchitin in mill\")\n        send_command(\"put group tooth in mill\")\n        send_command(\"mill for \" + count + \" yellow\")\n        set_variable(\"MillingGag\", \"Yes\")\n    }\n    else {\n        display_notice(\"(AT Milling): Options are 1-5 (or 1-10 if you have artifact mill).  Syntax: 'yellowmill #'\", fgcolor, bgcolor)\n    }\n}"}],"text":"^yellowmill(?: (1|2|3|4|5|6|7|8|9|10|.+))?$"},{"type":"alias","name":"greenmill 1-10","enabled":true,"id":7,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"var count = parseInt(args[1])\n\nvar BlueBladder = parseInt(get_variable(\"BlueBladder\"))\nvar BlueMoss = parseInt(get_variable(\"BlueMoss\"))\n\nif (get_variable(\"bluepriority\") == \"lowest\") {\n    if (BlueMoss <= BlueBladder) {\n        var blueuse = \"lumic\"\n        } else {\n            var blueuse = \"bladder\"\n            }\n}\nif (get_variable(\"bluepriority\") == \"highest\") {\n    if (BlueMoss >= BlueBladder) {\n        var blueuse = \"lumic\" \n        } else {\n            var blueuse = \"bladder\"\n            }\n}\nif (get_variable(\"bluepriority\") == \"lumic\") {\n    var blueuse = \"lumic\"\n    }\nif (get_variable(\"bluepriority\") == \"bladder\") {\n    var blueuse = \"bladder\"\n    }\n\nset_variable(\"RepeatCount\", 0)\nset_variable(\"RepeatRemainder\", 0)\nset_variable(\"RepeatColor\", \"\")\nvar fgcolor = get_variable(\"mfgcolor\")\nvar bgcolor = get_variable(\"mbgcolor\")\n\nif (get_variable(\"ArtifactMill\") == \"No\" && count > 5) {\n    display_notice(\"(AT Milling): You do not currently have Artifact Mill enabled.  Please enable Artifact Mill (Syntax: 'msettings artmill yes') or use Repeat Milling.  Syntax: 'rgreenmill #'\", fgcolor, bgcolor)\n} else {\n    if (count == 1) {\n        send_command(\"inr all\")\n        send_command(\"outr 2 \" + blueuse)\n        send_command(\"outr yellowchitin\")\n        send_command(\"outr tooth\")\n        send_command(\"outr 2 buffalohorn\")\n        \n        send_command(\"put group \" + blueuse + \" in mill\")\n        send_command(\"put yellowchitin in mill\")\n        send_command(\"put group buffalohorn in mill\")\n        send_command(\"put tooth in mill\")\n        send_command(\"mill for 1 green\")\n        set_variable(\"MillingGag\", \"Yes\")\n    } else \n        if (count > 1 && count < 11) {\n            send_command(\"inr all\")\n            send_command(\"outr \" + count*2 + \" \" + blueuse)\n            send_command(\"outr \" + count + \" yellowchitin\")\n            send_command(\"outr \" + count*2 + \" buffalohorn\")\n            send_command(\"outr \" + count + \" tooth\")\n            \n            send_command(\"put group \" + blueuse + \" in mill\")\n            send_command(\"put group yellowchitin in mill\")\n            send_command(\"put group buffalohorn in mill\")\n            send_command(\"put group tooth in mill\")\n            send_command(\"mill for \" + count + \" green\")\n            set_variable(\"MillingGag\", \"Yes\")\n        } else {\n            display_notice(\"(AT Milling): Options are 1-5 (or 1-10 if you have artifact mill).  Syntax: 'greenmill #'\", fgcolor, bgcolor)\n        }\n}"}],"text":"^greenmill(?: (1|2|3|4|5|6|7|8|9|10|.+))?$"},{"type":"alias","name":"purplemill 1-10","enabled":true,"id":6,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"var count = parseInt(args[1])\n\nvar BlueBladder = parseInt(get_variable(\"BlueBladder\"))\nvar BlueMoss = parseInt(get_variable(\"BlueMoss\"))\n\nif (get_variable(\"bluepriority\") == \"lowest\") {\n    if (BlueMoss <= BlueBladder) {\n        var blueuse = \"lumic\"\n        } \n    else {\n        var blueuse = \"bladder\"\n        }\n}\n\nif (get_variable(\"bluepriority\") == \"highest\") {\n    if (BlueMoss >= BlueBladder) {\n        var blueuse = \"lumic\"} \n    else {\n        var blueuse = \"bladder\"\n        }\n}\n\nif (get_variable(\"bluepriority\") == \"lumic\") {\n    var blueuse = \"lumic\"\n    }\nif (get_variable(\"bluepriority\") == \"bladder\") {\n    var blueuse = \"bladder\"\n    }\n\nvar RedClay = parseInt(get_variable(\"RedClay\"))\nvar RedChitin = parseInt(get_variable(\"RedChitin\"))\n\nif (get_variable(\"redpriority\") == \"lowest\") {\n    if (RedClay <= RedChitin) {\n        var reduse = \"clay\"\n        }\n    else {\n        var reduse = \"chitin\"\n        }\n}\n\nif (get_variable(\"redpriority\") == \"highest\") {\n    if (RedClay >= RedChitin) {\n        var reduse = \"clay\"\n        } \n    else {\n        var reduse = \"chitin\"\n        }\n}\n\nif (get_variable(\"redpriority\") == \"clay\") {\n    var reduse = \"clay\"\n    }\nif (get_variable(\"redpriority\") == \"chitin\") {\n    var reduse = \"redchitin\"\n    }\n\n\nset_variable(\"RepeatCount\", 0)\nset_variable(\"RepeatRemainder\", 0)\nset_variable(\"RepeatColor\", \"\")\nvar fgcolor = get_variable(\"mfgcolor\")\nvar bgcolor = get_variable(\"mbgcolor\")\n\nif (get_variable(\"ArtifactMill\") == \"No\" && count > 5) {\n    display_notice(\"(AT Milling): You do not currently have Artifact Mill enabled.  Please enable Artifact Mill (Syntax: 'msettings artmill yes') or use Repeat Milling.  Syntax: 'rpurplemill #'\", fgcolor, bgcolor)\n} else {\n    if (count == 1) {\n        send_command(\"inr all\")\n        send_command(\"outr 2 \" + reduse)\n        send_command(\"outr 2 \" + blueuse)\n        send_command(\"outr 2 buffalohorn\")\n        send_command(\"outr 2 scales\")\n        send_command(\"outr tongue\")\n        \n        send_command(\"put group \" + reduse + \" in mill\")\n        send_command(\"put group \" + blueuse + \" in mill\")\n        send_command(\"put group buffalohorn in mill\")\n        send_command(\"put group scales in mill\")\n        send_command(\"put tongue in mill\")\n        send_command(\"mill for 1 purple\")\n        set_variable(\"MillingGag\", \"Yes\")\n        \n    } else if (count > 1 && count < 11) {\n        send_command(\"inr all\")\n        send_command(\"outr \" + count*2 + \" \"  + reduse)\n        send_command(\"outr \" + count*2 + \" \" + blueuse)\n        send_command(\"outr \" + count*2 + \" buffalohorn\")\n        send_command(\"outr \" + count*2 + \" scales\")\n        send_command(\"outr \" + count + \" tongue\")\n        \n        send_command(\"put group \" + reduse + \" in mill\")\n        send_command(\"put group \" + blueuse + \" in mill\")\n        send_command(\"put group buffalohorn in mill\")\n        send_command(\"put group scales in mill\")\n        send_command(\"put group tongue in mill\")\n        send_command(\"mill for \" + count + \" purple\")\n        set_variable(\"MillingGag\", \"Yes\")\n    }\n    else {\n        display_notice(\"(AT Milling): Options are 1-5 (or 1-10 if you have artifact mill).  Syntax: 'purplemill #'\", fgcolor, bgcolor)\n    }\n}"}],"text":"^purplemill(?: (1|2|3|4|5|6|7|8|9|10|.+))?$"},{"type":"alias","name":"bluemill 1-10","enabled":true,"id":3,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"var count = parseInt(args[1])\n\nvar BlueBladder = parseInt(get_variable(\"BlueBladder\"))\nvar BlueMoss = parseInt(get_variable(\"BlueMoss\"))\n\nif (get_variable(\"bluepriority\") == \"lowest\") {\n    if (BlueMoss <= BlueBladder) {\n        var blueuse = \"lumic\"\n        } \n    else {\n        var blueuse = \"bladder\"\n        }\n}\n\nif (get_variable(\"bluepriority\") == \"highest\") {\n    if (BlueMoss >= BlueBladder) {\n        var blueuse = \"lumic\"} else {\n            var blueuse = \"bladder\"\n            }\n}\n\nif (get_variable(\"bluepriority\") == \"lumic\") {\n    var blueuse = \"lumic\"\n    }\n\nif (get_variable(\"bluepriority\") == \"bladder\") {\n    var blueuse = \"bladder\"\n    }\n\n\nset_variable(\"RepeatCount\", 0)\nset_variable(\"RepeatRemainder\", 0)\nset_variable(\"RepeatColor\", \"\")\nvar fgcolor = get_variable(\"mfgcolor\")\nvar bgcolor = get_variable(\"mbgcolor\")\n\nif (get_variable(\"ArtifactMill\") == \"No\" && count > 5) {\n    display_notice(\"(AT Milling): You do not currently have Artifact Mill enabled.  Please enable Artifact Mill (Syntax: 'msettings artmill yes') or use Repeat Milling.  Syntax: 'rbluemill #'\", fgcolor, bgcolor)\n} \nelse {\n    if (count == 1) {\n        send_command(\"inr all\")\n        send_command(\"outr buffalohorn\")\n        send_command(\"outr \" + blueuse)\n        \n        send_command(\"put buffalohorn in mill\")\n        send_command(\"put \" + blueuse + \" in mill\")\n        send_command(\"mill for 1 blue\")\n        set_variable(\"MillingGag\", \"Yes\")\n    } \n    else if (count > 1 && count < 11) {\n        send_command(\"inr all\")\n        send_command(\"outr \" + count + \" buffalohorn\")\n        send_command(\"outr \" + count + \" \" + blueuse)\n        \n        send_command(\"put group buffalohorn in mill\")\n        send_command(\"put group \" + blueuse + \" in mill\")\n        send_command(\"mill for \" + count + \" blue\")\n        set_variable(\"MillingGag\", \"Yes\")\n    }\n    else {\n        display_notice(\"(AT Milling): Options are 1-5 (or 1-10 if you have artifact mill).  Syntax: 'bluemill #'\", fgcolor, bgcolor)\n    }\n}"}],"text":"^bluemill(?: (1|2|3|4|5|6|7|8|9|10|.+))?$"},{"type":"alias","name":"redmill 1-10","enabled":true,"id":5,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"var count = parseInt(args[1])\n\nvar RedClay = parseInt(get_variable(\"RedClay\"))\nvar RedChitin = parseInt(get_variable(\"RedChitin\"))\n\nif (get_variable(\"redpriority\") == \"lowest\") {\n    if (RedClay <= RedChitin) {var reduse = \"clay\"\n    } \n    else {\n        var reduse = \"chitin\"\n        }\n}\n\nif (get_variable(\"redpriority\") == \"highest\") {\n    if (RedClay >= RedChitin) {\n        var reduse = \"clay\"\n        } \n    else {\n        var reduse = \"chitin\"\n        }\n}\n\nif (get_variable(\"redpriority\") == \"clay\") {\n    var reduse = \"clay\"\n    }\n\nif (get_variable(\"redpriority\") == \"chitin\") {\n    var reduse = \"redchitin\"\n    }\n\n\nset_variable(\"RepeatCount\", 0)\nset_variable(\"RepeatRemainder\", 0)\nset_variable(\"RepeatColor\", \"\")\nvar fgcolor = get_variable(\"mfgcolor\")\nvar bgcolor = get_variable(\"mbgcolor\")\n\nif (get_variable(\"ArtifactMill\") == \"No\" && count > 5) {\n    display_notice(\"(AT Milling): You do not currently have Artifact Mill enabled.  Please enable Artifact Mill (Syntax: 'msettings artmill yes') or use Repeat Milling.  Syntax: 'rredmill #'\", fgcolor, bgcolor)\n}\nelse {\n    if (count == 1) {\n        send_command(\"inr all\")\n        send_command(\"outr 1 \" + reduse)\n        send_command(\"outr 1 scales\")\n        \n        send_command(\"put \" + reduse + \" in mill\")\n        send_command(\"put scales in mill\")\n        send_command(\"mill for 1 red\")\n        set_variable(\"MillingGag\", \"Yes\")\n    } \nelse if (count > 1 && count < 11) {\n    send_command(\"inr all\")\n    send_command(\"outr \" + count + \" \" + reduse)\n    send_command(\"outr \" + count + \" scales\")\n    \n    send_command(\"put group \" + reduse + \" in mill\")\n    send_command(\"put group scales in mill\")\n    send_command(\"mill for \" + count + \" red\")\n    set_variable(\"MillingGag\", \"Yes\")\n}\n    else {\n        display_notice(\"(AT Milling): Options are 1-5 (or 1-10 if you have artifact mill).  Syntax: 'redmill #'.\", fgcolor, bgcolor)\n    }\n}"}],"text":"^redmill(?: (1|2|3|4|5|6|7|8|9|10|.+))?$"},{"type":"alias","name":"blackmill 1-10","enabled":true,"id":27,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"var count = parseInt(args[1])\n\nvar BlueBladder = parseInt(get_variable(\"BlueBladder\"))\nvar BlueMoss = parseInt(get_variable(\"BlueMoss\"))\n\nif (get_variable(\"bluepriority\") == \"lowest\") {\n    if (BlueMoss <= BlueBladder) {\n        var blueuse = \"lumic\"\n        }\n    else {\n        var blueuse = \"bladder\"\n        }\n}\n\nif (get_variable(\"bluepriority\") == \"highest\") {\n    if (BlueMoss >= BlueBladder) {\n        var blueuse = \"lumic\"\n        }\n    else {\n        var blueuse = \"bladder\"\n        }\n}\n\nif (get_variable(\"bluepriority\") == \"lumic\") {\n    var blueuse = \"lumic\"\n    }\n\nif (get_variable(\"bluepriority\") == \"bladder\") {\n    var blueuse = \"bladder\"\n    }\n\nvar RedClay = parseInt(get_variable(\"RedClay\"))\nvar RedChitin = parseInt(get_variable(\"RedChitin\"))\n\nif (get_variable(\"redpriority\") == \"lowest\") {\n    if (RedClay <= RedChitin) {\n        var reduse = \"clay\"\n        }\n    else {\n        var reduse = \"chitin\"\n        }\n}\n\nif (get_variable(\"redpriority\") == \"highest\") {\n    if (RedClay >= RedChitin) {\n        var reduse = \"clay\"\n        }\n    else {\n        var reduse = \"chitin\"\n        }\n}\n\nif (get_variable(\"redpriority\") == \"clay\") {\n    var reduse = \"clay\"\n    }\n\nif (get_variable(\"redpriority\") == \"chitin\") {\n    var reduse = \"redchitin\"\n    }\n\n\nset_variable(\"RepeatCount\", 0)\nset_variable(\"RepeatRemainder\", 0)\nset_variable(\"RepeatColor\", \"\")\nvar fgcolor = get_variable(\"mfgcolor\")\nvar bgcolor = get_variable(\"mbgcolor\")\n\nif (get_variable(\"ArtifactMill\") == \"No\" && count > 5) {\n    display_notice(\"(AT Milling): You do not currently have Artifact Mill enabled.  Please enable Artifact Mill (Syntax: 'msettings artmill yes') or use Repeat Milling.  Syntax: 'rblackmill #'\", fgcolor, bgcolor)\n} \n\nelse {\n    if (count == 1) {\n        send_command(\"inr all\")\n        send_command(\"outr \" + reduse)\n        send_command(\"outr \" + blueuse)\n        send_command(\"outr yellowchitin\")\n        send_command(\"outr flakes\")\n        send_command(\"outr 2 scales\")\n        send_command(\"outr 2 buffalohorn\")\n        send_command(\"outr 2 tooth\")\n        send_command(\"outr 3 tongue\")\n        \n        send_command(\"put \" + reduse + \" in mill\")\n        send_command(\"put \" + blueuse + \" in mill\")\n        send_command(\"put yellowchitin in mill\")\n        send_command(\"put flakes in mill\")\n        send_command(\"put group scales in mill\")\n        send_command(\"put group buffalohorn in mill\")\n        send_command(\"put group tooth in mill\")\n        send_command(\"put group tongue in mill\")\n        send_command(\"mill for 1 black\")\n        set_variable(\"MillingGag\", \"Yes\")\n    }\n    else if (count > 1 && count < 11) {\n        send_command(\"inr all\")\n        send_command(\"outr \" + count + \" \" + reduse)\n        send_command(\"outr \" + count + \" \" + blueuse)\n        send_command(\"outr \" + count + \" yellowchitin\")\n        send_command(\"outr \" + count + \" flakes\")\n        send_command(\"outr \" + count*2 + \" scales\")\n        send_command(\"outr \" + count*2 + \" buffalohorn\")\n        send_command(\"outr \" + count*2 + \" tooth\")\n        send_command(\"outr \" + count*3 + \" tongue\")\n        \n        send_command(\"put group \" + reduse + \" in mill\")\n        send_command(\"put group \" + blueuse + \" in mill\")\n        send_command(\"put group yellowchitin in mill\")\n        send_command(\"put group flakes in mill\")\n        send_command(\"put group scales in mill\")\n        send_command(\"put group buffalohorn in mill\")\n        send_command(\"put group tooth in mill\")\n        send_command(\"put group tongue in mill\")\n        send_command(\"mill for \" + count + \" black\")\n        set_variable(\"MillingGag\", \"Yes\")\n    }\n    else {\n        display_notice(\"(AT Milling): Options are 1-5 (or 1-10 if you have artifact mill).  Syntax: 'blackmill #'\", fgcolor, bgcolor)\n    }\n}"}],"text":"^blackmill(?: (1|2|3|4|5|6|7|8|9|10|.+))?$"}],"actions":[]},{"type":"group","name":"Repeat Milling","enabled":true,"id":39,"items":[{"type":"group","name":"Repeat Milling Alias","enabled":true,"id":28,"items":[{"type":"alias","name":"Repeat Gold Mill","enabled":true,"id":30,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"var total = parseInt(args[1])\nif (get_variable(\"ArtifactMill\") == \"Yes\") {\n    var millmax = 10\n    }\nelse {\n    var millmax = 5\n    }\n\nvar remainder = total % millmax\nvar repeats = Math.floor(total / millmax)\nset_variable(\"MilledRemainder\", \"No\")\nvar fgcolor = get_variable(\"mfgcolor\")\nvar bgcolor = get_variable(\"mbgcolor\")\n\nif (total < 5) {\n    display_notice(\"(AT Milling): Repeat milling options are 11+ (or 6-10 if you do not have artifact mill).  For quantities 5 or less please use normal milling alias.  Syntax: 'goldmill #'\", fgcolor, bgcolor)\n}\nelse\n    if (total > 5) {\n        set_variable(\"RepeatCount\", repeats)\n        set_variable(\"RepeatRemainder\", remainder)\n        set_variable(\"RepeatColor\", \"gold\")\n        run_function(\"RepeatMill\", \"\" ,\"Inkmilling\")\n    }\nelse {\n    display_notice(\"(AT Milling): Repeat milling options are 11+ (or 6-10 if you do not have artifact mill).  Syntax: 'rgoldmill #'\", fgcolor, bgcolor)\n}"}],"text":"^rgoldmill(?: (.+))?$"},{"type":"alias","name":"Repeat Yellow Mill","enabled":true,"id":31,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"var total = parseInt(args[1])\nif (get_variable(\"ArtifactMill\") == \"Yes\") {\n    var millmax = 10\n    }\nelse {\n    var millmax = 5\n    }\n\nvar remainder = total % millmax\nvar repeats = Math.floor(total / millmax)\nset_variable(\"MilledRemainder\", \"No\")\nvar fgcolor = get_variable(\"mfgcolor\")\nvar bgcolor = get_variable(\"mbgcolor\")\n\nif (total < 5) {\n    display_notice(\"(AT Milling): Repeat milling options are 11+ (or 6-10 if you do not have artifact mill).  For quantities 5 or less please use normal milling alias.  Syntax: 'yellowmill #'\", fgcolor, bgcolor)\n}\nelse\n    if (total > 5) {\n        set_variable(\"RepeatCount\", repeats)\n        set_variable(\"RepeatRemainder\", remainder)\n        set_variable(\"RepeatColor\", \"yellow\")\n        run_function(\"RepeatMill\", \"\" ,\"Inkmilling\")\n    }\nelse {\n    display_notice(\"(AT Milling): Repeat milling options are 11+ (or 6-10 if you do not have artifact mill).  Syntax: 'ryellowmill #'\", fgcolor, bgcolor)\n}\n"}],"text":"^ryellowmill(?: (.+))?$"},{"type":"alias","name":"Repeat Green Mill","enabled":true,"id":32,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"var total = parseInt(args[1])\nif (get_variable(\"ArtifactMill\") == \"Yes\") {\n    var millmax = 10\n    }\nelse {\n    var millmax = 5\n    }\n\nvar remainder = total % millmax\nvar repeats = Math.floor(total / millmax)\nset_variable(\"MilledRemainder\", \"No\")\nvar fgcolor = get_variable(\"mfgcolor\")\nvar bgcolor = get_variable(\"mbgcolor\")\n\nif (total < 5) {\n    display_notice(\"(AT Milling): Repeat milling options are 11+ (or 6-10 if you do not have artifact mill).  For quantities 5 or less please use normal milling alias.  Syntax: 'greenmill #'\", fgcolor, bgcolor)\n}\nelse\n    if (total > 5) {\n        set_variable(\"RepeatCount\", repeats)\n        set_variable(\"RepeatRemainder\", remainder)\n        set_variable(\"RepeatColor\", \"green\")\n        run_function(\"RepeatMill\", \"\" ,\"Inkmilling\")}\nelse {\n    display_notice(\"(AT Milling): Repeat milling options are 11+ (or 6-10 if you do not have artifact mill).  Syntax: 'rgreenmill #'\", fgcolor, bgcolor)\n}\n"}],"text":"^rgreenmill(?: (.+))?$"},{"type":"alias","name":"Repeat Purple Mill","enabled":true,"id":33,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"var total = parseInt(args[1])\nif (get_variable(\"ArtifactMill\") == \"Yes\") {\n    var millmax = 10\n    }\nelse {\n    var millmax = 5\n    }\n\nvar remainder = total % millmax\nvar repeats = Math.floor(total / millmax)\nset_variable(\"MilledRemainder\", \"No\")\nvar fgcolor = get_variable(\"mfgcolor\")\nvar bgcolor = get_variable(\"mbgcolor\")\n\nif (total < 5) {\n    display_notice(\"(AT Milling): Repeat milling options are 11+ (or 6-10 if you do not have artifact mill).  For quantities 5 or less please use normal milling alias.  Syntax: 'purplemill #'\", fgcolor, bgcolor)\n}\nelse\n    if (total > 5) {\n        set_variable(\"RepeatCount\", repeats)\n        set_variable(\"RepeatRemainder\", remainder)\n        set_variable(\"RepeatColor\", \"purple\")\n        run_function(\"RepeatMill\", \"\" ,\"Inkmilling\")}\nelse {\n    display_notice(\"(AT Milling): Repeat milling options are 11+ (or 6-10 if you do not have artifact mill).  Syntax: 'rpurplemill #'\", fgcolor, bgcolor)\n}"}],"text":"^rpurplemill(?: (.+))?$"},{"type":"alias","name":"Repeat Blue Mill","enabled":true,"id":34,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"var total = parseInt(args[1])\nif (get_variable(\"ArtifactMill\") == \"Yes\") {\n    var millmax = 10\n    } \nelse {\n    var millmax = 5\n    }\n\nvar remainder = total % millmax\nvar repeats = Math.floor(total / millmax)\nset_variable(\"MilledRemainder\", \"No\")\nvar fgcolor = get_variable(\"mfgcolor\")\nvar bgcolor = get_variable(\"mbgcolor\")\n\nif (total < 5) {\n    display_notice(\"(AT Milling): Repeat milling options are 11+ (or 6-10 if you do not have artifact mill).  For quantities 5 or less please use normal milling alias.  Syntax: 'bluemill #'\", fgcolor, bgcolor)\n}\nelse\n    if (total > 5) {\n        set_variable(\"RepeatCount\", repeats)\n        set_variable(\"RepeatRemainder\", remainder)\n        set_variable(\"RepeatColor\", \"blue\")\n        run_function(\"RepeatMill\", \"\" ,\"Inkmilling\")\n    }\nelse {\n    display_notice(\"(AT Milling): Repeat milling options are 11+ (or 6-10 if you do not have artifact mill).  Syntax: 'rbluemill #'\", fgcolor, bgcolor)\n}"}],"text":"^rbluemill(?: (.+))?$"},{"type":"alias","name":"Repeat Red Mill","enabled":true,"id":35,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"var total = parseInt(args[1])\nif (get_variable(\"ArtifactMill\") == \"Yes\") {\n    var millmax = 10\n    }\nelse {\n    var millmax = 5\n    }\n\nvar remainder = total % millmax\nvar repeats = Math.floor(total / millmax)\nset_variable(\"MilledRemainder\", \"No\")\nvar fgcolor = get_variable(\"mfgcolor\")\nvar bgcolor = get_variable(\"mbgcolor\")\n\nif (total < 5) {\n    display_notice(\"(AT Milling): Repeat milling options are 11+ (or 6-10 if you do not have artifact mill).  For quantities 5 or less please use normal milling alias.  Syntax: 'redmill #'\", fgcolor, bgcolor)\n}\nelse\n    if (total > 5) {\n        set_variable(\"RepeatCount\", repeats)\n        set_variable(\"RepeatRemainder\", remainder)\n        set_variable(\"RepeatColor\", \"red\")\n        run_function(\"RepeatMill\", \"\" ,\"Inkmilling\")\n    }\nelse {\n    display_notice(\"(AT Milling): Repeat milling options are 11+ (or 6-10 if you do not have artifact mill).  Syntax: 'rredmill #'\", fgcolor, bgcolor)\n}"}],"text":"^rredmill(?: (.+))?$"},{"type":"alias","name":"Repeat Black Mill","enabled":true,"id":36,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"var total = parseInt(args[1])\nif (get_variable(\"ArtifactMill\") == \"Yes\") {\n    var millmax = 10\n    }\nelse {\n    var millmax = 5\n    }\nvar remainder = total % millmax\nvar repeats = Math.floor(total / millmax)\nset_variable(\"MilledRemainder\", \"No\")\nvar fgcolor = get_variable(\"mfgcolor\")\nvar bgcolor = get_variable(\"mbgcolor\")\n\nif (total < 5) {\n    display_notice(\"(AT Milling): Repeat milling options are 11+ (or 6-10 if you do not have artifact mill).  For quantities 5 or less please use normal milling alias.  Syntax: 'blackmill #'\", fgcolor, bgcolor)\n}\nelse\n    if (total > 5) {\n        set_variable(\"RepeatCount\", repeats)\n        set_variable(\"RepeatRemainder\", remainder)\n        set_variable(\"RepeatColor\", \"black\")\n        run_function(\"RepeatMill\", \"\" ,\"Inkmilling\")\n    }\nelse {\n    display_notice(\"(AT Milling): Repeat milling options are 11+ (or 6-10 if you do not have artifact mill).  Syntax: 'rblackmill #'\", fgcolor, bgcolor)\n}"}],"text":"^rblackmill(?: (.+))?$"},{"type":"alias","name":"Stop Command","enabled":true,"id":57,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"set_variable(\"RepeatCount\", 0)\nset_variable(\"RepeatRemainder\", 0)\nset_variable(\"RepeatColor\", \"\")\n\nvar fgcolor = get_variable(\"mfgcolor\")\nvar bgcolor = get_variable(\"mbgcolor\")\n\ndisplay_notice(\"(AT Milling): Stopping the mill!!!!!\", fgcolor, bgcolor)"}],"text":"^rstop$"}],"actions":[]},{"type":"group","name":"Repeat Milling Functions","enabled":true,"id":40,"items":[{"type":"function","name":"RepeatMill","enabled":true,"id":37,"code":"var count = parseInt(get_variable(\"RepeatCount\"))\nvar remainder = parseInt(get_variable(\"RepeatRemainder\"))\nvar color = get_variable(\"RepeatColor\")\n\nif (get_variable(\"ArtifactMill\") == \"Yes\") {\n    var millmax = 10\n    }\nelse {\n    var millmax = 5\n    }\n\nvar BlueBladder = parseInt(get_variable(\"BlueBladder\"))\nvar BlueMoss = parseInt(get_variable(\"BlueMoss\"))\n\nif (get_variable(\"bluepriority\") == \"lowest\") {\n    if (BlueMoss <= BlueBladder) {\n        var blueuse = \"lumic\"\n        }\n    else {\n        var blueuse = \"bladder\"\n        }\n}\n\nif (get_variable(\"bluepriority\") == \"highest\") {\n    if (BlueMoss >= BlueBladder) {\n        var blueuse = \"lumic\"}\n    else {\n        var blueuse = \"bladder\"\n        }\n}\n\nif (get_variable(\"bluepriority\") == \"lumic\") {\n    var blueuse = \"lumic\"\n    }\nif (get_variable(\"bluepriority\") == \"bladder\") {\n    var blueuse = \"bladder\"\n    }\n\nvar RedClay = parseInt(get_variable(\"RedClay\"))\nvar RedChitin = parseInt(get_variable(\"RedChitin\"))\n\nif (get_variable(\"redpriority\") == \"lowest\") {\n    if (RedClay <= RedChitin) {\n        var reduse = \"clay\"}\n    else {\n        var reduse = \"chitin\"\n        }\n}\n\nif (get_variable(\"redpriority\") == \"highest\") {\n    if (RedClay >= RedChitin) {\n        var reduse = \"clay\"}\n    else {\n        var reduse = \"chitin\"\n        }\n}\n\nif (get_variable(\"redpriority\") == \"clay\") {\n    var reduse = \"clay\"\n    }\nif (get_variable(\"redpriority\") == \"chitin\") {\n    var reduse = \"redchitin\"\n    }\n\n\nvar fgcolor = get_variable(\"mfgcolor\")\nvar bgcolor = get_variable(\"mbgcolor\")\n\nif (count == 0 && remainder == 0) {\n    display_notice(\"(AT Milling): We did it.  Yay!\", fgcolor, bgcolor);\n    set_variable(\"RepeatCount\", 0);\n    set_variable(\"RepeatRemainder\", 0);\n    set_variable(\"RepeatColor\", \"\");\n    set_variable(\"MilledRemainder\", \"No\");    \n} {\n\n\n//GOLD\nif (color == \"gold\") {\n    if (count == 0 && remainder > 0) {\n        send_command(\"goldmill \" + remainder);\n        set_variable(\"RepeatRemainder\", 0);\n        set_variable(\"MilledRemainder\", \"Yes\")\n    }{\n            if (count > 0) {\n                send_command(\"inr all\")\n                send_command(\"outr \" + millmax + \" flakes\")\n                send_command(\"outr \" + millmax*2 + \" scales\")\n                send_command(\"outr \" + millmax*2 + \" buffalohorn\")\n                send_command(\"outr \" + millmax*2 + \" tooth\")\n                send_command(\"outr \" + millmax + \" tongue\")                \n                \n                send_command(\"put group flakes in mill\")\n                send_command(\"put group scales in mill\")\n                send_command(\"put group horn in mill\")\n                send_command(\"put group tooth in mill\")\n                send_command(\"put group tongue in mill\")\n                send_command(\"mill for \" + millmax + \" gold\")                \n                set_variable(\"MillingGag\", \"Yes\")\n            }\n    }\n}\n\n//YELLOW\nif (color == \"yellow\") {\n    if (count == 0 && remainder > 0) {\n        send_command(\"yellowmill \" + remainder);\n        set_variable(\"RepeatRemainder\", 0);\n        set_variable(\"MilledRemainder\", \"Yes\")\n    } {\n            if (count > 0) {\n                send_command(\"inr all\")\n                send_command(\"outr \" + millmax + \" yellowchitin\")\n                send_command(\"outr \" + millmax + \" tooth\")\n                                \n                send_command(\"put group yellowchitin in mill\")\n                send_command(\"put group tooth in mill\")\n                send_command(\"mill for \" + millmax + \" yellow\")                \n                set_variable(\"MillingGag\", \"Yes\")\n            }\n    }\n}\n\n//GREEN\nif (color == \"green\"){\n    if (count == 0 && remainder > 0) {\n        send_command(\"greenmill \" + remainder);\n        set_variable(\"RepeatRemainder\", 0);\n        set_variable(\"MilledRemainder\", \"Yes\")\n    } {\n            if (count > 0) {\n                send_command(\"inr all\")\n                send_command(\"outr \" + millmax*2 + \" \" + blueuse)\n                send_command(\"outr \" + millmax + \" yellowchitin\")\n                send_command(\"outr \" + millmax*2 + \" buffalohorn\")\n                send_command(\"outr \" + millmax + \" tooth\")\n                \n                send_command(\"put group \" + blueuse + \" in mill\")\n                send_command(\"put group yellowchitin in mill\")\n                send_command(\"put group buffalohorn in mill\")\n                send_command(\"put group tooth in mill\")\n                send_command(\"mill for \" + millmax + \" green\")\n                set_variable(\"MillingGag\", \"Yes\")\n            }\n    }\n}\n\n//PURPLE\nif (color == \"purple\") {\n    if (count == 0 && remainder > 0) {\n        send_command(\"purplemill \" + remainder);\n        set_variable(\"RepeatRemainder\", 0);\n        set_variable(\"MilledRemainder\", \"Yes\")\n    } {\n        if (count > 0) {\n            send_command(\"inr all\")\n            send_command(\"outr \" + millmax*2 + \" \"  + reduse)\n            send_command(\"outr \" + millmax*2 + \" \" + blueuse)\n            send_command(\"outr \" + millmax*2 + \" buffalohorn\")\n            send_command(\"outr \" + millmax*2 + \" scales\")\n            send_command(\"outr \" + millmax + \" tongue\")\n            \n            send_command(\"put group \" + reduse + \" in mill\")\n            send_command(\"put group \" + blueuse + \" in mill\")\n            send_command(\"put group buffalohorn in mill\")\n            send_command(\"put group scales in mill\")\n            send_command(\"put group tongue in mill\")\n            send_command(\"mill for \" + millmax + \" purple\")\n            set_variable(\"MillingGag\", \"Yes\")\n        }\n    }\n}\n\n//BLUE\nif (color == \"blue\") {\n    if (count == 0 && remainder > 0) {\n        send_command(\"bluemill \" + remainder);\n        set_variable(\"RepeatRemainder\", 0);\n        set_variable(\"MilledRemainder\", \"Yes\")\n    } {\n        if (count > 0) {\n            send_command(\"inr all\")\n            send_command(\"outr \" + millmax + \" buffalohorn\")\n            send_command(\"outr \" + millmax + \" \" + blueuse)            \n            \n            send_command(\"put group buffalohorn in mill\")\n            send_command(\"put group \" + blueuse + \" in mill\")\n            send_command(\"mill for \" + millmax + \" blue\")\n            set_variable(\"MillingGag\", \"Yes\")\n        }\n    }\n}\n\n//RED\nif (color == \"red\") {\n    if (count == 0 && remainder > 0) {\n        send_command(\"redmill \" + remainder);\n        set_variable(\"RepeatRemainder\", 0);\n        set_variable(\"MilledRemainder\", \"Yes\")\n    } else {\n        if (count > 0) {\n            send_command(\"inr all\")\n            send_command(\"outr \" + millmax + \" \" + reduse)\n            send_command(\"outr \" + millmax + \" scales\")\n                        \n            send_command(\"put group \" + reduse + \" in mill\")\n            send_command(\"put group scales in mill\")\n            send_command(\"mill for \" + millmax + \" red\")\n            set_variable(\"MillingGag\", \"Yes\")\n        }\n    }\n}\n\n//BLACK\nif (color == \"black\") {\n    if (count == 0 && remainder > 0) {\n        send_command(\"blackmill \" + remainder);\n        set_variable(\"RepeatRemainder\", 0);\n        set_variable(\"MilledRemainder\", \"Yes\")\n    } {\n        if (count > 0) {\n            send_command(\"inr all\")\n            send_command(\"outr \" + millmax + \" \" + reduse)\n            send_command(\"outr \" + millmax + \" \" + blueuse)\n            send_command(\"outr \" + millmax + \" yellowchitin\")\n            send_command(\"outr \" + millmax + \" flakes\")\n            send_command(\"outr \" + millmax*2 + \" scales\")\n            send_command(\"outr \" + millmax*2 + \" buffalohorn\")\n            send_command(\"outr \" + millmax*2 + \" tooth\")\n            send_command(\"outr \" + millmax*3 + \" tongue\")           \n            \n            send_command(\"put group \" + reduse + \" in mill\")\n            send_command(\"put group \" + blueuse + \" in mill\")\n            send_command(\"put group yellowchitin in mill\")\n            send_command(\"put group flakes in mill\")\n            send_command(\"put group scales in mill\")\n            send_command(\"put group buffalohorn in mill\")\n            send_command(\"put group tooth in mill\")\n            send_command(\"put group tongue in mill\")\n            send_command(\"mill for \" + millmax + \" black\")\n            set_variable(\"MillingGag\", \"Yes\")\n        }\n    }\n}\n}"}],"actions":[]}],"actions":[]},{"type":"group","name":"Milling Triggers","enabled":true,"id":41,"items":[{"type":"trigger","name":"RepeatMillDone","enabled":true,"id":42,"matching":"substring","whole_words":true,"case_sensitive":true,"text":"With a satisfying rattle, you note that the milling is complete as the fruit of your labours drops into the opening at the base of the mill.","actions":[{"action":"wait","seconds":"0","milliseconds":"100"},{"action":"script","script":"var fgcolor = get_variable(\"mfgcolor\")\nvar bgcolor = get_variable(\"mbgcolor\")\n\nif (get_variable(\"RepeatCount\") <= 1) {\n    set_variable(\"RepeatCount\", 0);var newcount = 0}\nelse {\n    var count = parseInt(get_variable(\"RepeatCount\"))\n    var newcount = (count - 1)\n    }\nif (get_variable(\"MilledRemainder\") == \"Yes\") {\n    set_variable(\"RepeatRemainder\", 0)\n}\n\nvar remainder = parseInt(get_variable(\"RepeatRemainder\"))\n\nif (newcount == 0 && remainder == 0) {\n    display_notice(\"(AT Milling): We did it, yay!\", fgcolor, bgcolor)\n}\n\nif (newcount > 0) {\n    set_variable(\"RepeatCount\", newcount)\n    run_function(\"RepeatMill\", \"\", \"Inkmilling\")\n    display_notice(\"(AT Milling): We have \" + newcount + \" full batches, and \" + remainder + \" remainder to go.\", fgcolor, bgcolor)\n} {\n    if (newcount == 0 && remainder > 0) {\n        run_function(\"RepeatMill\", \"\", \"Inkmilling\")\n        display_notice(\"(AT Milling): We have \" + newcount + \" full batches, and \" + remainder + \" remainder to go.\", fgcolor, bgcolor)\n    }\n}\n\n"}]},{"type":"trigger","name":"GetInksDone","enabled":true,"id":2,"matching":"substring","whole_words":true,"case_sensitive":true,"text":"With a satisfying rattle, you note that the milling is complete as the fruit of your labours drops into the opening at the base of the mill.","actions":[{"action":"script","script":"send_command(\"get group ink from mill\")\nsend_command(\"get ink from mill\")\nsend_command(\"inr all\")\nset_variable(\"MillingGag\", \"No\")"}]},{"type":"trigger","name":"Mill Started","enabled":true,"id":43,"matching":"substring","whole_words":true,"case_sensitive":true,"text":"Carefully closing the lid on an oaken mill, you begin to slowly turn the handle on top, grinding and combining the contents.","actions":[{"action":"script","script":""}]},{"type":"trigger","name":"EmptyMillGag","enabled":true,"id":44,"matching":"substring","whole_words":true,"case_sensitive":true,"text":"An oaken mill doesn't contain that.","actions":[{"action":"gag"}]},{"type":"trigger","name":"NoArtifactMill","enabled":true,"id":86,"matching":"substring","whole_words":true,"case_sensitive":true,"text":"You can only mill for 1-5 inks at a time.","actions":[{"action":"script","script":"var fgcolor = get_variable(\"mfgcolor\")\nvar bgcolor = get_variable(\"mbgcolor\")\n\nset_variable(\"ArtifactMill\", \"No\")\nsend_command(\"get group reagent from mill;get group reagent from mill;get group reagent from mill;get group reagent from mill;get group reagent from mill;inr all\")\n\ndisplay_notice(\"(AT Milling): You do not currently have an Artifact Mill.  Artifact Mill setting is now disabled. Please select a quantity 1-5 or use Repeat Milling.  Syntax: 'r<color>mill #'\", fgcolor, bgcolor)"}]}],"actions":[]}],"actions":[]},{"type":"group","name":"Reagent Tracking","enabled":true,"id":29,"items":[{"type":"group","name":"Red","enabled":true,"id":60,"items":[{"type":"trigger","name":"RedClayAdd","enabled":true,"id":59,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You store (.+) red clay, bringing the total in the rift to (.+).$","actions":[{"action":"script","script":"var total = args[2]\nset_variable(\"RedClay\", total)"}]},{"type":"trigger","name":"RedClaySub","enabled":true,"id":58,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You remove (.+) red clay, bringing the total in the rift to (.+).$","actions":[{"action":"script","script":"var total = args[2]\nset_variable(\"RedClay\", total)"}]},{"type":"trigger","name":"RedChitinSub","enabled":true,"id":68,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You remove (.+) red chitin, bringing the total in the rift to (.+).$","actions":[{"action":"script","script":"var total = args[2]\nset_variable(\"RedChitin\", total)"}]},{"type":"trigger","name":"RedChitinAdd","enabled":true,"id":69,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You store (.+) red chitin, bringing the total in the rift to (.+).$","actions":[{"action":"script","script":"var total = args[2]\nset_variable(\"RedChitin\", total)"}]}],"actions":[]},{"type":"group","name":"Blue","enabled":true,"id":61,"items":[{"type":"trigger","name":"BlueBladderSub","enabled":true,"id":70,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You remove (.+) ink bladder, bringing the total in the rift to (.+).$","actions":[{"action":"script","script":"var total = args[2]\nset_variable(\"BlueBladder\", total)\n"}]},{"type":"trigger","name":"BlueBladderAdd","enabled":true,"id":71,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You store (.+) ink bladder, bringing the total in the rift to (.+).$","actions":[{"action":"script","script":"var total = args[2]\nset_variable(\"BlueBladder\", total)\n"}]},{"type":"trigger","name":"BlueMossSub","enabled":true,"id":72,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You remove (.+) lumic moss, bringing the total in the rift to (.+).$","actions":[{"action":"script","script":"var total = args[2]\nset_variable(\"BlueMoss\", total)\n"}]},{"type":"trigger","name":"BlueMossAdd","enabled":true,"id":73,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You store (.+) lumic moss, bringing the total in the rift to (.+).$","actions":[{"action":"script","script":"var total = args[2]\nset_variable(\"BlueMoss\", total)\n"}]}],"actions":[]},{"type":"group","name":"Yellow","enabled":true,"id":62,"items":[{"type":"trigger","name":"YellowChitinSub","enabled":true,"id":74,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You remove (.+) yellow chitin, bringing the total in the rift to (.+).$","actions":[{"action":"script","script":"var total = args[2]\nset_variable(\"YellowChitin\", total)\n"}]},{"type":"trigger","name":"YellowChitinAdd","enabled":true,"id":75,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You store (.+) yellow chitin, bringing the total in the rift to (.+).$","actions":[{"action":"script","script":"var total = args[2]\nset_variable(\"YellowChitin\", total)\n"}]}],"actions":[]},{"type":"group","name":"Gold","enabled":true,"id":65,"items":[{"type":"trigger","name":"GoldFlakeSub","enabled":true,"id":76,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You remove (.+) gold flakes, bringing the total in the rift to (.+).$","actions":[{"action":"script","script":"var total = args[2]\nset_variable(\"GoldFlakes\", total)\n"}]},{"type":"trigger","name":"GoldFlakeAdd","enabled":true,"id":77,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You store (.+) gold flakes, bringing the total in the rift to (.+).$","actions":[{"action":"script","script":"var total = args[2]\nset_variable(\"GoldFlakes\", total)\n"}]}],"actions":[]},{"type":"group","name":"Common","enabled":true,"id":63,"items":[{"type":"trigger","name":"FishScalesSub","enabled":true,"id":78,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You remove (.+) fish scales, bringing the total in the rift to (.+).$","actions":[{"action":"script","script":"var total = args[2]\nset_variable(\"FishScales\", total)\n"}]},{"type":"trigger","name":"FishScalesAdd","enabled":true,"id":79,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You store (.+) fish scales, bringing the total in the rift to (.+).$","actions":[{"action":"script","script":"var total = args[2]\nset_variable(\"FishScales\", total)\n"}]}],"actions":[]},{"type":"group","name":"Uncommon","enabled":true,"id":64,"items":[{"type":"trigger","name":"BuffaloHornSub","enabled":true,"id":82,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You remove (.+) buffalo horn, bringing the total in the rift to (.+).$","actions":[{"action":"script","script":"var total = args[2]\nset_variable(\"BuffaloHorn\", total)\n"}]},{"type":"trigger","name":"BuffaloHornAdd","enabled":true,"id":83,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You store (.+) buffalo horn, bringing the total in the rift to (.+).$","actions":[{"action":"script","script":"var total = args[2]\nset_variable(\"BuffaloHorn\", total)\n"}]}],"actions":[]},{"type":"group","name":"Scarce","enabled":true,"id":66,"items":[{"type":"trigger","name":"SharkToothSub","enabled":true,"id":84,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You remove (.+) shark tooth, bringing the total in the rift to (.+).$","actions":[{"action":"script","script":"var total = args[2]\nset_variable(\"SharkTooth\", total)\n"}]},{"type":"trigger","name":"SharkToothAdd","enabled":true,"id":85,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You store (.+) shark tooth, bringing the total in the rift to (.+).$","actions":[{"action":"script","script":"var total = args[2]\nset_variable(\"SharkTooth\", total)\n"}]}],"actions":[]},{"type":"group","name":"Rare","enabled":true,"id":67,"items":[{"type":"trigger","name":"WyrmTongueSub","enabled":true,"id":80,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You remove (.+) wyrm tongue, bringing the total in the rift to (.+).$","actions":[{"action":"script","script":"var total = args[2]\nset_variable(\"WyrmTongue\", total)\n"}]},{"type":"trigger","name":"WyrmTongueAdd","enabled":true,"id":81,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You store (.+) wyrm tongue, bringing the total in the rift to (.+).$","actions":[{"action":"script","script":"var total = args[2]\nset_variable(\"WyrmTongue\", total)\n"}]}],"actions":[]}],"actions":[]},{"type":"group","name":"ToMake","enabled":true,"id":99,"items":[{"type":"alias","name":"ToMakeAlias","enabled":true,"id":100,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"//Enter the script here\nvar amount = args[1]\nvar color = args[2]\n\nvar UncommonHave = parseInt(get_variable(\"BuffaloHorn\"))\nvar ScarceHave = parseInt(get_variable(\"SharkTooth\"))\nvar RareHave = parseInt(get_variable(\"WyrmTongue\"))\nvar CommonHave = parseInt(get_variable(\"FishScales\"))\nvar RedHave = (parseInt(get_variable(\"RedClay\")) + parseInt(get_variable(\"RedChitin\")))\nvar BlueHave = (parseInt(get_variable(\"BlueBladder\")) + parseInt(get_variable(\"BlueMoss\")))\nvar GoldHave = parseInt(get_variable(\"GoldFlakes\"))\nvar YellowHave = parseInt(get_variable(\"YellowChitin\"))\n\nvar RedToMake = 0\nvar BlueToMake = 0\nvar YellowToMake = 0\nvar GoldToMake = 0\nvar CommonToMake = 0\nvar UncommonToMake = 0\nvar ScarceToMake = 0\nvar RareToMake = 0\n\n\nvar fgcolor = get_variable(\"mfgcolor\")\nvar bgcolor = get_variable(\"mbgcolor\")\n\n//Red is 1x red, 1x common\n\nif (color == \"red\") {\n    var RedToMake = amount\n    var CommonToMake = amount\n    var RedNeeded = RedToMake - RedHave\n    var CommonNeeded = CommonToMake - CommonHave\n    }\n\n//Blue is 1x blue, 1x uncommon\n\nif (color == \"blue\") {\n    var BlueToMake = amount\n    var UncommonToMake = amount\n    var BlueNeeded = BlueToMake - BlueHave\n    var UncommonNeeded = UncommonToMake - UncommonHave\n    }\n\n//Yellow is 1x yellow, 1x scarce\n\nif (color == \"yellow\") {\n    var YellowToMake = amount\n    var ScarceToMake = amount\n    var YellowNeeded = YellowToMake - YellowHave\n    var ScarceNeeded = ScarceToMake - ScarceHave\n    }\n\n//Purple is 2x red, 2x blue, 2x common, 2x uncommon, 1x rare\n\nif (color == \"purple\") {\n    var BlueToMake = amount*2\n    var UncommonToMake = amount*2\n    var BlueNeeded = BlueToMake - BlueHave\n    var UncommonNeeded = UncommonToMake - UncommonHave\n    var RedToMake = amount*2\n    var CommonToMake = amount*2\n    var RedNeeded = RedToMake - RedHave\n    var CommonNeeded = CommonToMake - CommonHave\n    var RareToMake = amount\n    var RareNeeded = RareToMake - RareHave\n    }\n\n//Green is 2x blue, 1x yellow, 2x uncommon, 1x scarce\n\nif (color == \"green\") {\n    var BlueToMake = amount*2\n    var UncommonToMake = amount*2\n    var BlueNeeded = BlueToMake - BlueHave\n    var UncommonNeeded = UncommonToMake - UncommonHave\n    var YellowToMake = amount\n    var ScarceToMake = amount\n    var YellowNeeded = YellowToMake - YellowHave\n    var ScarceNeeded = ScarceToMake - ScarceHave\n    }\n\n//Gold is 1x gold, 2 common, 2 uncommon, 2 scarce, 1x rare\n\nif (color == \"gold\") {\n    var GoldToMake = amount\n    var UncommonToMake = amount*2\n    var GoldNeeded = GoldToMake - GoldHave\n    var UncommonNeeded = UncommonToMake - UncommonHave\n    var CommonToMake = amount*2\n    var CommonNeeded = CommonToMake - CommonHave\n    var RareToMake = amount\n    var RareNeeded = RareToMake - RareHave\n    var ScarceToMake = amount*2\n    var ScarceNeeded = ScarceToMake - ScarceHave\n    }\n\n// Black is 1x red, 1x blue, 1x yellow, 1x gold, 2x common, 2x uncommon, 2x scarce, 3x rare\n\nif (color == \"black\") {\n    var RedToMake = amount\n    var BlueToMake = amount\n    var YellowToMake = amount\n    var GoldToMake = amount\n    var CommonToMake = amount*2\n    var UncommonToMake = amount*2\n    var ScarceToMake = amount*2\n    var RareToMake = amount*3\n    var RedNeeded = RedToMake - RedHave\n    var BlueNeeded = BlueToMake - BlueHave\n    var YellowNeeded = YellowToMake - YellowHave\n    var GoldNeeded = GoldToMake - GoldHave\n    var CommonNeeded = CommonToMake - CommonHave\n    var UncommonNeeded = UncommonToMake - UncommonHave\n    var ScarceNeeded = ScarceToMake - ScarceHave\n    var RareNeeded = RareToMake - RareHave\n    }\n\nif (RedNeeded < 0) {\n    var RedNeeded = 0\n    }\nif (BlueNeeded < 0) {\n    var BlueNeeded = 0\n    }\nif (YellowNeeded < 0) {\n    var YellowNeeded = 0\n    }\nif (GoldNeeded < 0) {\n    var GoldNeeded = 0\n    }\nif (CommonNeeded < 0) {\n    var CommonNeeded = 0\n    }\nif (UncommonNeeded < 0) {\n    var UncommonNeeded = 0\n    }\nif (ScarceNeeded < 0) {\n    var ScarceNeeded = 0\n    }\nif (RareNeeded < 0) {\n    var RareNeeded = 0\n    }\n\n// Red Display\nif (color == \"red\") {\n    client.print(\"To make \" + args[1] + \" \" + args[2] + \" inks.\")\n    client.print(\"You need to acquire: \" + RedNeeded + \" red and \" + CommonNeeded + \" common.\")\n}\n\n// Blue Display\nif (color == \"blue\") {\n    client.print(\"To make \" + args[1] + \" \" + args[2] + \" inks.\")\n    client.print(\"You need to acquire: \" + BlueNeeded + \" blue and \" + UncommonNeeded + \" uncommon.\")\n}\n\n// Yellow Display\nif (color == \"yellow\") {client.print(\"To make \" + args[1] + \" \" + args[2] + \" inks.\")\nclient.print(\"You need to acquire: \" + YellowNeeded + \" yellow and \" + ScarceNeeded + \" scarce.\")}\n\n// Purple Display\nif (color == \"purple\") {\n    client.print(\"To make \" + args[1] + \" \" + args[2] + \" inks.\")\n    client.print(\"You need to acquire: \" + RedNeeded + \" red, \" + BlueNeeded + \" blue, \" + CommonNeeded + \" common, \" + UncommonNeeded + \" uncommon, and \" + RareNeeded + \" rare.\")\n}\n\n// Green Display\nif (color == \"green\") {\n    client.print(\"To make \" + args[1] + \" \" + args[2] + \" inks.\")\n    client.print(\"You need to acquire: \" + BlueNeeded + \" blue,  \" + YellowNeeded + \" yellow, \" + UncommonNeeded + \" uncommon, and \" + ScarceNeeded + \" scarce.\")\n}\n\n// Gold Display\nif (color == \"gold\") {\n    client.print(\"To make \" + args[1] + \" \" + args[2] + \" inks.\")\n    client.print(\"You need to acquire: \" + GoldNeeded + \" gold,  \" + CommonNeeded + \" common, \" + UncommonNeeded + \" uncommon,  \" + ScarceNeeded + \" scarce, and \" + RareNeeded + \" rare.\")\n}\n\n// Black Display\nif (color == \"black\") {\n    client.print(\"To make \" + args[1] + \" \" + args[2] + \" inks.\")\n    client.print(\"You need to acquire: \" + RedNeeded + \" red,  \" + BlueNeeded + \" blue, \" + YellowNeeded + \" yellow,  \" + GoldNeeded + \" gold,  \" + CommonNeeded + \" common, \" + UncommonNeeded + \" uncommon,  \" + ScarceNeeded + \" scarce, and \" + RareNeeded + \" rare.\")\n}"}],"text":"^tomake (.+) (.+)$"}],"actions":[]},{"type":"group","name":"Gagging","enabled":true,"id":101,"items":[{"type":"trigger","name":"OutrMillingGag","enabled":true,"id":102,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You remove (.+), bringing the total in the rift to (.+)$","actions":[{"action":"if","cond-type1":"variable","cond-val1":"@MillingGag","cond-type2":"value","cond-val2":"Yes","cond-op":"eq","cond-mod":"","cond-cs":false,"dothen":"continue","doelse":"stop","dothenlabel":"","doelselabel":""},{"action":"gag"}]},{"type":"trigger","name":"PutInMillGag","enabled":true,"id":103,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You put a (.+) into an (.+) mill.$","actions":[{"action":"if","cond-type1":"variable","cond-val1":"@MillingGag","cond-type2":"value","cond-val2":"Yes","cond-op":"eq","cond-mod":"","cond-cs":false,"dothen":"continue","doelse":"stop","dothenlabel":"","doelselabel":""},{"action":"gag"}]},{"type":"trigger","name":"MidMillingGag","enabled":true,"id":104,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^Gaining momentum, you turn the handle on (.+) faster, the contents providing less resistance to your efforts.$","actions":[{"action":"if","cond-type1":"variable","cond-val1":"@MillingGag","cond-type2":"value","cond-val2":"Yes","cond-op":"eq","cond-mod":"","cond-cs":false,"dothen":"continue","doelse":"stop","dothenlabel":"","doelselabel":""},{"action":"gag"}]},{"type":"trigger","name":"TakeFromMillGag","enabled":true,"id":105,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"^You take (.+) from an oaken mill.$","actions":[{"action":"if","cond-type1":"variable","cond-val1":"@MillingGag","cond-type2":"value","cond-val2":"Yes","cond-op":"eq","cond-mod":"","cond-cs":false,"dothen":"continue","doelse":"stop","dothenlabel":"","doelselabel":""},{"action":"gag"}]}],"actions":[]}]}